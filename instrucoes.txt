
Prototype
   Extende os objetos html, incluindo novos métodos e propriedades 
   que podem ser utilizadas por toda aplicação

dir(app.el.formPanelAddContact);
   retorna o elemento html como 'objeto' do DOM
   consegue visualizar o nome da classe que ele herda (HTMLFormElement)
   isso facilita para fazer o Prototype do elemento   

O projeto estava rodando localmente, acessando o arquivo index.html diretamente
Na aula 122 executamos os comandos abaixo
npm init                                        para iniciar o projeto node na pasta
npm install webpack@3.1.0 --save                instala o webpack na versao 3.1.0 e salva como dependencia do projeto     
npm install webpack-dev-server@2.5.1 --save     instala o webpack server versao 2.5.1 e salva como dependencia do projeto

O webpack faz o bundle da aplicação que roda no nodeJS
Foi criado o arquivo de configuração do webpack (webpack.config.js)
Neste arquivo vamos definir o arquivo JS que tem a chamada para todos os arquivos JS da aplicação
Vamos também definir o arquivo de saída, que será gerado para publicação da aplicação JS
Na página index.html incluimos a chamada para o arquivo bundle.js que será gerado pelo webpack

Incluimos no package.json os scripts para execução do projeto utilizando o node e o webpack
"build": "webpack --config webpack.config.js"
"start": "webpack-dev-server"

Para executar os scripts, acessar a pasta da aplicação e executar
npm run start 
npm run build

Ao executar o script start por exemplo, iremos executar o webpack-dev-server, que inicia um servidor apontando para a pasta da aplicação
   Project is running at http://localhost:8080/
   webpack output is served from /dist
   Hash: b5e302020e33d418c704
   Version: webpack 3.1.0

para exibir trabalhar com pdf foi instalado a biblioteca abaixo:
npm install pdfjs-dist --save   

diferenças entre var, let ou const
https://www.alura.com.br/artigos/entenda-diferenca-entre-var-let-e-const-no-javascript
var      cria a variável com escopo global, que pode ser acessada em qualquer ponto do código (é como se tivesse sido criado no topo do código)
let      cria a variável com escopo de bloco, que pode ser acessada somente dentro do bloco {} em que foi declarada
const    cria uma constante que recebe o valor logo que é criada e não pode mais ser alterada, mantendo também um escopo de bloco {}

para instalar o pacote para acesso ao firebase na aplicação
npm install firebase --save

projeto criado no firebase
nome: whatsapp-clone

script gerado após vincular o firebase a um app webpack
<!-- The core Firebase JS SDK is always required and must be listed first -->
<script src="https://www.gstatic.com/firebasejs/7.14.0/firebase-app.js"></script>

<!-- TODO: Add SDKs for Firebase products that you want to use
     https://firebase.google.com/docs/web/setup#available-libraries -->
<script src="https://www.gstatic.com/firebasejs/7.14.0/firebase-analytics.js"></script>

<script>
  // Your web app's Firebase configuration
  var firebaseConfig = {
    apiKey: "AIzaSyCThDeH3A-Y60WeU_NSIyfHv_xIoQAp2ZE",
    authDomain: "whatsapp-clone-a4565.firebaseapp.com",
    databaseURL: "https://whatsapp-clone-a4565.firebaseio.com",
    projectId: "whatsapp-clone-a4565",
    storageBucket: "whatsapp-clone-a4565.appspot.com",
    messagingSenderId: "1026913628385",
    appId: "1:1026913628385:web:6532ec181345f75ad407a0",
    measurementId: "G-5YT1V6GJSC"
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  firebase.analytics();
</script>

função base64
retorna a string em formato de texto base64, sem caracteres especiais
btoa("anderson rocha")           >  "YW5kZXJzb24gcm9jaGE="
atob("YW5kZXJzb24gcm9jaGE=")     >  "anderson rocha"
